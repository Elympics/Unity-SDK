variables:
  NODE_VERSION: "18.13.0"
  DOTNET_VERSION: "6.0"
  MESSAGEPACK_VERSION: "2.5.124"
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: 2021.3.16f1
  UNITY_ARCH: linux-il2cpp-1.0.1
  PACKAGE_DIR: $CI_PROJECT_DIR
  TESTING_PROJECT_NAME: TestingProject
  UNITY_DIR: ${CI_PROJECT_DIR}/${TESTING_PROJECT_NAME}
  PACKAGE_DIR: ${UNITY_DIR}/Packages/com.daftmobile.elympics
  FF_ENABLE_BASH_EXIT_CODE_CHECK: 1

stages:
  - prepare-version
  - prepare-license
  - prepare-project
  - test
  - check
  - trigger
  - pre-release
  - release

default:
  cache: {}
  tags:
    - docker

workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH"
    - if: "$CI_COMMIT_TAG"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never

.cond.license:
  rules:
    - if: "$UNITY_LICENSE != null"
      when: always

.cond.releasebranch:
  rules: &cond_releasebranch_rules
    - if: '$CI_COMMIT_BRANCH =~ /^(release|hotfix)\/v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: always

.cond.mergerequest.target.main:
  rules: &cond_mergerequest_target_main
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^(release|hotfix)\/v[0-9]+\.[0-9]+\.[0-9]+$/'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
      when: always

.cond.release.auto:
  rules: &cond_release_auto_rules
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always

.cond.release.post:
  rules: &cond_release_post_rules
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: always

.cond.release.always:
  rules: &cond_release_always_rules
    - *cond_release_auto_rules
    - *cond_release_post_rules

.cond.release.orbranch:
  rules:
    - *cond_releasebranch_rules
    - *cond_release_always_rules

.cond.release.manual:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual

.alpine_image:
  image: alpine:latest

.unity_image:
  image: unityci/editor:ubuntu-$UNITY_VERSION-$UNITY_ARCH

.node_image:
  image: node:$NODE_VERSION

.bash_image:
  image: bash

.ubuntu_image:
  image: ubuntu

.unity_default:
  before_script: &unity_default_before_script
    - ./.scripts/ci/before_script.sh

get-package-version:
  extends:
    - .bash_image
    - .cond.release.orbranch
  stage: prepare-version
  variables:
    GIT_DEPTH: 1
  before_script:
    - apk add --no-cache jq
  script:
    - export PACKAGE_VERSION=$(./.scripts/ci/semver_from_package.sh package.json)
    - echo PACKAGE_VERSION=$PACKAGE_VERSION | tee prepare.env
    - echo RELEASE_TAG_VERSION="v$PACKAGE_VERSION" | tee -a prepare.env
    - cat prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

get-branch-version:
  extends:
    - .bash_image
    - .cond.releasebranch
  stage: prepare-version
  variables:
    GIT_DEPTH: 1
  script:
    - echo BRANCH_VERSION=$(./.scripts/ci/semver_from_branch.sh $CI_COMMIT_BRANCH) | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

get-activation-file:
  rules:
    - if: "$UNITY_LICENSE == null"
      when: manual
  stage: prepare-license
  variables:
    GIT_DEPTH: 1
  before_script:
    - *unity_default_before_script
  script:
    - ./.scripts/ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min

check-commits:
  extends:
    - .alpine_image
  stage: prepare-project
  before_script:
   - apk add git
  script:
    - ./.scripts/ci/check_for_tmp_commits.sh

create-testing-project:
  extends:
    - .unity_image
    - .cond.license
  stage: prepare-project
  variables:
    GIT_DEPTH: 1
  before_script:
    - *unity_default_before_script
    - wget -O /usr/local/bin/yq 'https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64' && chmod +x /usr/local/bin/yq
  script:
    - ./.scripts/ci/create_testing_project.sh
    - ./.scripts/ci/run_with_defines.sh ELYMPICS_DEBUG
    - ./.scripts/ci/generate_solution_files.sh
  artifacts:
    paths:
      - "./$TESTING_PROJECT_NAME"
    expire_in: 1 hour

.test:
  extends:
    - .unity_image
    - .cond.license
  stage: test
  needs:
    - job: create-testing-project
      artifacts: true
  before_script:
    - *unity_default_before_script
    - apt-get update && apt-get install -y --no-install-recommends xsltproc
  script:
    - ./.scripts/ci/test.sh
  artifacts:
    when: always
    paths:
      - "$TEST_PLATFORM-results.xml"
    expire_in: 2 weeks
    reports:
      junit: "$TEST_PLATFORM-results.xml"

test:playmode:
  extends: .test
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: JUNIT
    GIT_DEPTH: 1

test:editmode:
  extends: .test
  variables:
    TEST_PLATFORM: editmode
    TESTING_TYPE: JUNIT
    GIT_DEPTH: 1

verify-formatting:
  extends:
    - .unity_image
    - .cond.license
  stage: check
  needs:
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
    - job: create-testing-project
      artifacts: true
  variables:
    GIT_DEPTH: 1
  before_script:
    - wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb
    - apt-get update && apt-get install -y --no-install-recommends jq dotnet-sdk-$DOTNET_VERSION
  script:
    - ./.scripts/ci/generate_formatting_report.sh
  artifacts:
    when: always
    paths:
      - format-report.codequality.json
    expire_in: 2 weeks
    reports:
      codequality: format-report.codequality.json



verify-messagepack-generated:
  extends:
    - .unity_image
    - .cond.license
  stage: check
  needs:
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
    - job: create-testing-project
      artifacts: true
  variables:
    GIT_DEPTH: 1
    ORIGINAL_GENERATED_PATH: "${PACKAGE_DIR}/Runtime/Plugins/MessagePackGenerated.cs"
    CORRECT_GENERATED_PATH: ./MessagePackGenerated.cs
  before_script:
    - wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb && dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb
    - apt-get update && apt-get install -y --no-install-recommends jq dotnet-sdk-$DOTNET_VERSION
    - dotnet tool install --global MessagePack.Generator --version $MESSAGEPACK_VERSION
  script:
    - '"${HOME}/.dotnet/tools/mpc" -i "${UNITY_DIR}/Elympics.csproj" -o "$CORRECT_GENERATED_PATH"'
    - diff "$ORIGINAL_GENERATED_PATH" "$CORRECT_GENERATED_PATH"
  artifacts:
    when: always
    paths:
      - MessagePackGenerated.cs
    expire_in: 1 day

.trigger:
  extends: .cond.releasebranch
  stage: trigger
  needs:
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
  inherit:
    variables: false
  variables:
    CI_ELYMPICS_SDK_VERSION_OVERRIDE: "$CI_COMMIT_SHA"
    CI_ELYMPICS_SDK_SOURCE_OVERRIDE: "$CI_PROJECT_URL.git"
    GIT_DEPTH: 1

trigger:tanks:
  extends:
    - .trigger
  rules: *cond_mergerequest_target_main
  trigger:
    project: unity/tanks
    strategy: depend

trigger:spellz:
  extends:
    - .trigger
  rules: *cond_mergerequest_target_main
  trigger:
    project: unity/spellz/gameplay
    strategy: depend

create-changelog:
  extends:
    - .node_image
    - .cond.releasebranch
  stage: pre-release
  needs:
    - job: get-package-version
      artifacts: true
    - job: get-branch-version
      artifacts: true
  before_script:
    - npm install -g conventional-changelog-cli@2.2.2
    - git config user.email "bot@elympics.cc"
    - git config user.name "Elympics Bot"
    - git remote remove gitlab_origin || true
    - git remote add gitlab_origin https://oauth2:$GITLAB_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  script:
    - ./.scripts/ci/bump_version_and_generate_changelog.sh || exit 137
    - ./.scripts/ci/commit_changelog_and_version.sh
  allow_failure:
    exit_codes: 137

get-changelog-for-release:
  extends:
    - .node_image
    - .cond.release.always
  stage: pre-release
  needs:
    - job: get-package-version
      artifacts: true
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
  variables:
    GIT_DEPTH: 1
  before_script:
    - npm install changelog-parser
  script:
    - echo $PACKAGE_VERSION
    - node ./.scripts/ci/parse_changelog.js CHANGELOG.md $PACKAGE_VERSION
    - export RELEASE_NOTES=$(node ./.scripts/ci/parse_changelog.js CHANGELOG.md $PACKAGE_VERSION)
    - echo "Release notes to deploy... \n$RELEASE_NOTES"
    - echo "$RELEASE_NOTES" > release.description
  artifacts:
    paths:
      - release.description

check-if-release-possible:
  extends:
    - .cond.release.auto
    - .ubuntu_image
  stage: pre-release
  needs:
    - job: get-package-version
      artifacts: true
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
    - job: verify-formatting
      artifacts: false
    - job: verify-messagepack-generated
      artifacts: false
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
  script:
    - ./.scripts/ci/ensure_tag_does_not_exist.sh $RELEASE_TAG_VERSION

release:gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  extends:
    - .cond.release.manual
  needs:
    - job: get-changelog-for-release
      artifacts: true
    - job: get-package-version
      artifacts: true
    - job: check-if-release-possible
      artifacts: false
  script:
    - echo "Releasing tag for version $RELEASE_TAG_VERSION"
  release:
    tag_name: $RELEASE_TAG_VERSION
    description: ./release.description

release:github:
  stage: release
  image: ghcr.io/supportpal/github-gh-cli:latest
  extends:
    - .cond.release.post
  needs:
    - job: get-changelog-for-release
      artifacts: true
  script:
    - gh release create "$CI_COMMIT_TAG" -t "$CI_COMMIT_TAG" -F ./release.description --repo "$GH_REPO" --verify-tag
