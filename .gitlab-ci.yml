variables:
  NODE_VERSION: 18.13.0
  UNITY_ACTIVATION_FILE: ./unity3d.alf
  UNITY_VERSION: 2021.3.16f1
  UNITY_ARCH: linux-il2cpp-1.0.1
  PACKAGE_DIR: $CI_PROJECT_DIR
  TESTING_PROJECT_NAME: TestingProject
  UNITY_DIR: ${CI_PROJECT_DIR}/${TESTING_PROJECT_NAME}

cache: {}

stages:
  - prepare
  - test
  - trigger
  - pre-release
  - release

default:
  tags:
    - docker

.cond.releasebranch:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/v[0-9]+\.[0-9]+\.[0-9]+$/
      when: always

.cond.release.auto:
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: always

.cond.release.always:
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: always
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      when: always

.cond.release.post:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      when: always

.cond.release.manual:
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: manual

.env_unity: &env_unity
  image: unityci/editor:ubuntu-$UNITY_VERSION-$UNITY_ARCH

.env_node: &env_node
  image: node:$NODE_VERSION

.env_ubuntu: &env_ubuntu
  image: ubuntu

.env_bash: &env_bash
  image: bash

.node_before_script: &node_before_script
  before_script:
    - npm install -g conventional-changelog-cli

.unity_before_script: &unity_before_script
  before_script:
    - ./scripts/ci/before_script.sh

.ubuntu_before_script: &ubuntu_before_script
  before_script:
    - apt update && apt install git -y

.bash_before_script: &bash_before_script
  before_script:
    - apk add --no-cache jq

.license: &license
  rules:
    - if: '$UNITY_LICENSE != null'
      when: always

.unity_defaults: &unity_defaults
  <<:
    - *env_unity
    - *unity_before_script
    - *license

.node_defaults: &node_defaults
  <<:
    - *env_node
    - *node_before_script

.ubuntu_defaults: &ubuntu_defaults
  <<:
    - *env_ubuntu
    - *ubuntu_before_script

.bash_defaults: &bash_defaults
  <<:
    - *env_bash
    - *bash_before_script

get-package-version:
  <<: *bash_defaults
  stage: prepare
  variables:
    GIT_DEPTH: 1
  script:
    - export PACKAGE_VERSION=$(./scripts/ci/semver_from_package.sh package.json)
    - echo PACKAGE_VERSION=$PACKAGE_VERSION | tee prepare.env
    - echo RELEASE_TAG_VERSION="v$PACKAGE_VERSION" | tee -a prepare.env
    - cat prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

get-branch-version:
  <<: *bash_defaults
  stage: prepare
  extends:
    - .cond.releasebranch
  variables:
    GIT_DEPTH: 1
  script:
    - echo BRANCH_VERSION=$(./scripts/ci/semver_from_branch.sh $CI_COMMIT_BRANCH) | tee prepare.env
  artifacts:
    reports:
      dotenv: prepare.env

get-activation-file:
  <<: *unity_before_script
  rules:
    - if: '$UNITY_LICENSE == null'
      when: manual
  stage: prepare
  script:
    - ./scripts/ci/get_activation_file.sh
  artifacts:
    paths:
      - $UNITY_ACTIVATION_FILE
    expire_in: 10 min

.test: &test
  <<: *unity_defaults
  stage: test
  script:
    - ./scripts/ci/create_testing_project.sh
    - ./scripts/ci/test.sh
  artifacts:
    when: always
    expire_in: 2 weeks
  coverage: /<Linecoverage>(.*?)</Linecoverage>/

test:playmode:
  <<: *test
  variables:
    TEST_PLATFORM: playmode
    TESTING_TYPE: JUNIT

test:editmode:
  <<: *test
  variables:
    TEST_PLATFORM: editmode
    TESTING_TYPE: JUNIT

.trigger:
  extends: .cond.releasebranch
  stage: trigger
  needs:
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
  variables:
    CI_ELYMPICS_SDK_VERSION_OVERRIDE: $CI_COMMIT_SHA
    CI_ELYMPICS_SDK_SOURCE_OVERRIDE: "$CI_PROJECT_URL.git"

trigger:tanks:
  extends: .trigger
  trigger:
    project: unity/tanks
    strategy: depend

trigger:spellz:
  extends: .trigger
  trigger:
    project: unity/spellz/gameplay
    strategy: depend

create-changelog:
  <<: *node_defaults
  stage: pre-release
  extends:
    - .cond.releasebranch
  needs:
    - job: get-package-version
      artifacts: true
    - job: get-branch-version
      artifacts: true
  script:
    - |
      ./scripts/ci/bump_version_and_generate_changelog.sh || exit 137
      git config user.email "bot@elympics.cc"
      git config user.name "Elympics Bot"
      git remote remove gitlab_origin || true
      git remote add gitlab_origin https://oauth2:$GITLAB_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
      ./scripts/ci/commit_changelog_and_version.sh
  allow_failure:
    exit_codes: 137

get-changelog-for-release:
  <<: *node_defaults
  extends:
    - .cond.release.always
  stage: pre-release
  needs:
    - job: get-package-version
      artifacts: true
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
  variables:
    GIT_DEPTH: 1
  script:
    - npm install changelog-parser
    - echo $PACKAGE_VERSION
    - node ./scripts/ci/parse_changelog.js CHANGELOG.md $PACKAGE_VERSION
    - export RELEASE_NOTES=$(node ./scripts/ci/parse_changelog.js CHANGELOG.md $PACKAGE_VERSION)
    - echo "Release notes to deploy... \n$RELEASE_NOTES"
    - echo "$RELEASE_NOTES" > release.description
  artifacts:
    paths:
      - release.description

check-if-release-possible:
  <<: *ubuntu_defaults
  extends:
    - .cond.release.auto
  stage: pre-release
  needs:
    - job: get-package-version
      artifacts: true
    - job: test:playmode
      artifacts: false
    - job: test:editmode
      artifacts: false
  script:
    - ./scripts/ci/ensure_tag_does_not_exist.sh $RELEASE_TAG_VERSION

release:gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  extends:
    - .cond.release.manual
  needs:
    - job: get-changelog-for-release
      artifacts: true
    - job: get-package-version
      artifacts: true
    - job: check-if-release-possible
      artifacts: false
  script:
    - echo "Releasing tag for version $RELEASE_TAG_VERSION"
  release:
    tag_name: $RELEASE_TAG_VERSION
    description: ./release.description

release:github:
  stage: release
  image: ghcr.io/supportpal/github-gh-cli:latest
  extends:
    - .cond.release.post
  needs:
    - job: get-changelog-for-release
      artifacts: true
  script:
    - gh release create $CI_COMMIT_TAG -F ./release.description --repo $GH_REPO --verify-tag
