using System;
using System.IO;
using UnityEngine;

namespace Elympics.Weaver
{
    /// <summary>
    /// Keeps track of the assembly path and if the
    /// weaving is enabled or not.
    /// </summary>
    [Serializable]
    public class WeavedAssembly
    {
        public delegate void WeavedAssemblyDelegate(WeavedAssembly weavedAssembly);

        [SerializeField]
        private string m_RelativePath;
        [SerializeField]
        private bool m_IsActive = true;
        [SerializeField]
        private bool shouldThrowIfNotFound = true;

        private string m_dataPath;
        private bool m_IsValid;

        /// <summary>
        /// Returns back true if the assembly is
        /// valid and false if it's not.
        /// </summary>
        public bool isValid => m_IsValid;

        /// <summary>
        /// Returns back the file path to this assembly
        /// </summary>
        public string relativePath
        {
            get => m_RelativePath;
            set => m_RelativePath = value;
        }

        /// <summary>
        /// Returns true if this assembly should be modified
        /// by Weaver or not.
        /// </summary>
        public bool IsActive
        {
            get => m_IsActive;
            set => m_IsActive = value;
        }

        public bool ShouldThrowIfNotFound => shouldThrowIfNotFound;

        /// <summary>
        /// Returns back if this module currently has debug symbols.
        /// </summary>
        public bool HasMonoDebugSymbols => File.Exists(GetSystemPath() + ".mdb");

        /// <summary>
        /// Returns back if this assembly is generated by Unity.
        /// </summary>
        public bool IsUnityGenerated()
        {
            return m_RelativePath.StartsWith("Library/ScriptAssemblies/");
        }

        /// <summary>
        /// Invoked when the inspector for this assembly is turned on.
        /// </summary>
        public void OnEnable()
        {
            m_IsValid = File.Exists(relativePath);
            m_dataPath = Application.dataPath;
        }

        /// <summary>
        /// Returns back if this assembly exists on disk.
        /// </summary>
        /// <returns></returns>
        public bool Exists()
        {
            return File.Exists(GetSystemPath());
        }

        /// <summary>
        /// Returns back the system path to this
        /// assembly.
        /// </summary>
        public string GetSystemPath()
        {
            // Get our path
            var path = m_dataPath;
            // Get the length
            var pathLength = path.Length;
            // Split it
            path = path[..(pathLength - /* Assets */ 6)];
            // Add our relative path
            path = Path.Combine(path, relativePath);
            // Return the result
            return path;
        }

        private void OnValidate()
        {
            m_IsValid = File.Exists(relativePath);
        }
    }
}
