// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(105)
            {
                { typeof((string, global::System.Collections.Generic.List<(string, string)>)), 0 },
                { typeof((string, string)), 1 },
                { typeof(global::Elympics.ElympicsSnapshotWithMetadata[]), 2 },
                { typeof(global::Elympics.ErrorBlame?), 3 },
                { typeof(global::Elympics.ErrorKind?), 4 },
                { typeof(global::Elympics.Rooms.Models.ChainType?), 5 },
                { typeof(global::System.Collections.Generic.Dictionary<int, global::Elympics.TickToPlayerInput>), 6 },
                { typeof(global::System.Collections.Generic.Dictionary<long, global::Elympics.ElympicsSnapshotPlayerInput>), 7 },
                { typeof(global::System.Collections.Generic.IDictionary<global::System.Guid, global::System.Collections.Generic.IDictionary<string, string>>), 8 },
                { typeof(global::System.Collections.Generic.IDictionary<string, string>), 9 },
                { typeof(global::System.Collections.Generic.IList<global::Elympics.ElympicsInput>), 10 },
                { typeof(global::System.Collections.Generic.IList<global::Elympics.InitialMatchPlayerDataGuid>), 11 },
                { typeof(global::System.Collections.Generic.IReadOnlyDictionary<string, string>), 12 },
                { typeof(global::System.Collections.Generic.IReadOnlyList<global::Elympics.Rooms.Models.ListedRoomChange>), 13 },
                { typeof(global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>), 14 },
                { typeof(global::System.Collections.Generic.IReadOnlyList<global::System.Guid>), 15 },
                { typeof(global::System.Collections.Generic.KeyValuePair<int, byte[]>), 16 },
                { typeof(global::System.Collections.Generic.List<(string, global::System.Collections.Generic.List<(string, string)>)>), 17 },
                { typeof(global::System.Collections.Generic.List<(string, string)>), 18 },
                { typeof(global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingRequestDto>), 19 },
                { typeof(global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingResponseDto>), 20 },
                { typeof(global::System.Collections.Generic.List<global::Elympics.ElympicsBehaviourMetadata>), 21 },
                { typeof(global::System.Collections.Generic.List<global::Elympics.ElympicsRpcMessage>), 22 },
                { typeof(global::System.Collections.Generic.List<global::Elympics.Rooms.Models.RoomCoin>), 23 },
                { typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>), 24 },
                { typeof(global::System.Guid[]), 25 },
                { typeof(object[]), 26 },
                { typeof(global::Elympics.ErrorBlame), 27 },
                { typeof(global::Elympics.ErrorKind), 28 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame), 29 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes), 30 },
                { typeof(global::Elympics.Rooms.Models.ChainType), 31 },
                { typeof(global::Elympics.Rooms.Models.LeavingReason), 32 },
                { typeof(global::Elympics.Rooms.Models.MatchmakingState), 33 },
                { typeof(global::Elympics.Rooms.Models.MatchState), 34 },
                { typeof(global::Elympics.ElympicsDataWithTick), 35 },
                { typeof(global::Elympics.IFromServer), 36 },
                { typeof(global::Elympics.IToServer), 37 },
                { typeof(global::Elympics.Lobby.Models.IFromLobby), 38 },
                { typeof(global::Elympics.Lobby.Models.IToLobby), 39 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker), 40 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker), 41 },
                { typeof(global::Communication.Lobby.Models.ToLobby.RequestRollings), 42 },
                { typeof(global::Communication.Lobby.Models.ToLobby.RollingRequestDto), 43 },
                { typeof(global::Communication.Lobby.Models.ToLobby.RollingResponseDto), 44 },
                { typeof(global::Communication.Lobby.Models.ToLobby.RollingsResponse), 45 },
                { typeof(global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse), 46 },
                { typeof(global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth), 47 },
                { typeof(global::Elympics.ElympicsBehaviourMetadata), 48 },
                { typeof(global::Elympics.ElympicsInput), 49 },
                { typeof(global::Elympics.ElympicsInputList), 50 },
                { typeof(global::Elympics.ElympicsPlayer), 51 },
                { typeof(global::Elympics.ElympicsRpcMessage), 52 },
                { typeof(global::Elympics.ElympicsRpcMessageList), 53 },
                { typeof(global::Elympics.ElympicsSnapshot), 54 },
                { typeof(global::Elympics.ElympicsSnapshotPlayerInput), 55 },
                { typeof(global::Elympics.ElympicsSnapshotWithMetadata), 56 },
                { typeof(global::Elympics.FactoryState), 57 },
                { typeof(global::Elympics.InitialMatchPlayerDataGuid), 58 },
                { typeof(global::Elympics.Lobby.Models.JoinLobby), 59 },
                { typeof(global::Elympics.Lobby.Models.OperationResult), 60 },
                { typeof(global::Elympics.Lobby.Models.Ping), 61 },
                { typeof(global::Elympics.Lobby.Models.Pong), 62 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.GameData), 63 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker), 64 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchData), 65 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchFound), 66 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError), 67 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.Ping), 68 },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.Pong), 69 },
                { typeof(global::Elympics.Rooms.Models.CancelMatchmaking), 70 },
                { typeof(global::Elympics.Rooms.Models.ChangeTeam), 71 },
                { typeof(global::Elympics.Rooms.Models.CreateRoom), 72 },
                { typeof(global::Elympics.Rooms.Models.GameDataResponse), 73 },
                { typeof(global::Elympics.Rooms.Models.JoinWithJoinCode), 74 },
                { typeof(global::Elympics.Rooms.Models.JoinWithRoomId), 75 },
                { typeof(global::Elympics.Rooms.Models.LeaveRoom), 76 },
                { typeof(global::Elympics.Rooms.Models.ListedRoomChange), 77 },
                { typeof(global::Elympics.Rooms.Models.MatchData), 78 },
                { typeof(global::Elympics.Rooms.Models.MatchDetails), 79 },
                { typeof(global::Elympics.Rooms.Models.MatchmakingData), 80 },
                { typeof(global::Elympics.Rooms.Models.PublicMatchmakingData), 81 },
                { typeof(global::Elympics.Rooms.Models.PublicRoomState), 82 },
                { typeof(global::Elympics.Rooms.Models.RollingBet), 83 },
                { typeof(global::Elympics.Rooms.Models.RoomBetDetails), 84 },
                { typeof(global::Elympics.Rooms.Models.RoomBetDetailsSlim), 85 },
                { typeof(global::Elympics.Rooms.Models.RoomChain), 86 },
                { typeof(global::Elympics.Rooms.Models.RoomCoin), 87 },
                { typeof(global::Elympics.Rooms.Models.RoomCurrency), 88 },
                { typeof(global::Elympics.Rooms.Models.RoomIdOperationResult), 89 },
                { typeof(global::Elympics.Rooms.Models.RoomListChanged), 90 },
                { typeof(global::Elympics.Rooms.Models.RoomStateChanged), 91 },
                { typeof(global::Elympics.Rooms.Models.RoomTournamentDetails), 92 },
                { typeof(global::Elympics.Rooms.Models.RoomWasLeft), 93 },
                { typeof(global::Elympics.Rooms.Models.SetReady), 94 },
                { typeof(global::Elympics.Rooms.Models.SetRoomParameters), 95 },
                { typeof(global::Elympics.Rooms.Models.SetUnready), 96 },
                { typeof(global::Elympics.Rooms.Models.StartMatchmaking), 97 },
                { typeof(global::Elympics.Rooms.Models.UnwatchRooms), 98 },
                { typeof(global::Elympics.Rooms.Models.WatchRooms), 99 },
                { typeof(global::Elympics.SnapshotAnalysis.CollectorMatchData), 100 },
                { typeof(global::Elympics.SnapshotAnalysis.Serialization.SnapshotSerializationPackage), 101 },
                { typeof(global::Elympics.SnapshotAnalysis.SnapshotSaverInitData), 102 },
                { typeof(global::Elympics.TickToPlayerInput), 103 },
                { typeof(global::Elympics.UserInfo), 104 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ValueTupleFormatter<string, global::System.Collections.Generic.List<(string, string)>>();
                case 1: return new global::MessagePack.Formatters.ValueTupleFormatter<string, string>();
                case 2: return new global::MessagePack.Formatters.ArrayFormatter<global::Elympics.ElympicsSnapshotWithMetadata>();
                case 3: return new global::MessagePack.Formatters.NullableFormatter<global::Elympics.ErrorBlame>();
                case 4: return new global::MessagePack.Formatters.NullableFormatter<global::Elympics.ErrorKind>();
                case 5: return new global::MessagePack.Formatters.NullableFormatter<global::Elympics.Rooms.Models.ChainType>();
                case 6: return new global::MessagePack.Formatters.DictionaryFormatter<int, global::Elympics.TickToPlayerInput>();
                case 7: return new global::MessagePack.Formatters.DictionaryFormatter<long, global::Elympics.ElympicsSnapshotPlayerInput>();
                case 8: return new global::MessagePack.Formatters.InterfaceDictionaryFormatter<global::System.Guid, global::System.Collections.Generic.IDictionary<string, string>>();
                case 9: return new global::MessagePack.Formatters.InterfaceDictionaryFormatter<string, string>();
                case 10: return new global::MessagePack.Formatters.InterfaceListFormatter2<global::Elympics.ElympicsInput>();
                case 11: return new global::MessagePack.Formatters.InterfaceListFormatter2<global::Elympics.InitialMatchPlayerDataGuid>();
                case 12: return new global::MessagePack.Formatters.InterfaceReadOnlyDictionaryFormatter<string, string>();
                case 13: return new global::MessagePack.Formatters.InterfaceReadOnlyListFormatter<global::Elympics.Rooms.Models.ListedRoomChange>();
                case 14: return new global::MessagePack.Formatters.InterfaceReadOnlyListFormatter<global::Elympics.UserInfo>();
                case 15: return new global::MessagePack.Formatters.InterfaceReadOnlyListFormatter<global::System.Guid>();
                case 16: return new global::MessagePack.Formatters.KeyValuePairFormatter<int, byte[]>();
                case 17: return new global::MessagePack.Formatters.ListFormatter<(string, global::System.Collections.Generic.List<(string, string)>)>();
                case 18: return new global::MessagePack.Formatters.ListFormatter<(string, string)>();
                case 19: return new global::MessagePack.Formatters.ListFormatter<global::Communication.Lobby.Models.ToLobby.RollingRequestDto>();
                case 20: return new global::MessagePack.Formatters.ListFormatter<global::Communication.Lobby.Models.ToLobby.RollingResponseDto>();
                case 21: return new global::MessagePack.Formatters.ListFormatter<global::Elympics.ElympicsBehaviourMetadata>();
                case 22: return new global::MessagePack.Formatters.ListFormatter<global::Elympics.ElympicsRpcMessage>();
                case 23: return new global::MessagePack.Formatters.ListFormatter<global::Elympics.Rooms.Models.RoomCoin>();
                case 24: return new global::MessagePack.Formatters.ListFormatter<global::System.Collections.Generic.KeyValuePair<int, byte[]>>();
                case 25: return new global::MessagePack.Formatters.ArrayFormatter<global::System.Guid>();
                case 26: return new global::MessagePack.Formatters.ArrayFormatter<object>();
                case 27: return new MessagePack.Formatters.Elympics.ErrorBlameFormatter();
                case 28: return new MessagePack.Formatters.Elympics.ErrorKindFormatter();
                case 29: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.ErrorBlameFormatter();
                case 30: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodesFormatter();
                case 31: return new MessagePack.Formatters.Elympics.Rooms.Models.ChainTypeFormatter();
                case 32: return new MessagePack.Formatters.Elympics.Rooms.Models.LeavingReasonFormatter();
                case 33: return new MessagePack.Formatters.Elympics.Rooms.Models.MatchmakingStateFormatter();
                case 34: return new MessagePack.Formatters.Elympics.Rooms.Models.MatchStateFormatter();
                case 35: return new MessagePack.Formatters.Elympics.ElympicsDataWithTickFormatter();
                case 36: return new MessagePack.Formatters.Elympics.IFromServerFormatter();
                case 37: return new MessagePack.Formatters.Elympics.IToServerFormatter();
                case 38: return new MessagePack.Formatters.Elympics.Lobby.Models.IFromLobbyFormatter();
                case 39: return new MessagePack.Formatters.Elympics.Lobby.Models.IToLobbyFormatter();
                case 40: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.IFromMatchmakerFormatter();
                case 41: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.IToMatchmakerFormatter();
                case 42: return new MessagePack.Formatters.Communication.Lobby.Models.ToLobby.RequestRollingsFormatter();
                case 43: return new MessagePack.Formatters.Communication.Lobby.Models.ToLobby.RollingRequestDtoFormatter();
                case 44: return new MessagePack.Formatters.Communication.Lobby.Models.ToLobby.RollingResponseDtoFormatter();
                case 45: return new MessagePack.Formatters.Communication.Lobby.Models.ToLobby.RollingsResponseFormatter();
                case 46: return new MessagePack.Formatters.Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponseFormatter();
                case 47: return new MessagePack.Formatters.Elympics.Communication.Lobby.Models.ToLobby.ShowAuthFormatter();
                case 48: return new MessagePack.Formatters.Elympics.ElympicsBehaviourMetadataFormatter();
                case 49: return new MessagePack.Formatters.Elympics.ElympicsInputFormatter();
                case 50: return new MessagePack.Formatters.Elympics.ElympicsInputListFormatter();
                case 51: return new MessagePack.Formatters.Elympics.ElympicsPlayerFormatter();
                case 52: return new MessagePack.Formatters.Elympics.ElympicsRpcMessageFormatter();
                case 53: return new MessagePack.Formatters.Elympics.ElympicsRpcMessageListFormatter();
                case 54: return new MessagePack.Formatters.Elympics.ElympicsSnapshotFormatter();
                case 55: return new MessagePack.Formatters.Elympics.ElympicsSnapshotPlayerInputFormatter();
                case 56: return new MessagePack.Formatters.Elympics.ElympicsSnapshotWithMetadataFormatter();
                case 57: return new MessagePack.Formatters.Elympics.FactoryStateFormatter();
                case 58: return new MessagePack.Formatters.Elympics.InitialMatchPlayerDataGuidFormatter();
                case 59: return new MessagePack.Formatters.Elympics.Lobby.Models.JoinLobbyFormatter();
                case 60: return new MessagePack.Formatters.Elympics.Lobby.Models.OperationResultFormatter();
                case 61: return new MessagePack.Formatters.Elympics.Lobby.Models.PingFormatter();
                case 62: return new MessagePack.Formatters.Elympics.Lobby.Models.PongFormatter();
                case 63: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.GameDataFormatter();
                case 64: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.JoinMatchmakerFormatter();
                case 65: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.MatchDataFormatter();
                case 66: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.MatchFoundFormatter();
                case 67: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.MatchmakingErrorFormatter();
                case 68: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.PingFormatter();
                case 69: return new MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket.PongFormatter();
                case 70: return new MessagePack.Formatters.Elympics.Rooms.Models.CancelMatchmakingFormatter();
                case 71: return new MessagePack.Formatters.Elympics.Rooms.Models.ChangeTeamFormatter();
                case 72: return new MessagePack.Formatters.Elympics.Rooms.Models.CreateRoomFormatter();
                case 73: return new MessagePack.Formatters.Elympics.Rooms.Models.GameDataResponseFormatter();
                case 74: return new MessagePack.Formatters.Elympics.Rooms.Models.JoinWithJoinCodeFormatter();
                case 75: return new MessagePack.Formatters.Elympics.Rooms.Models.JoinWithRoomIdFormatter();
                case 76: return new MessagePack.Formatters.Elympics.Rooms.Models.LeaveRoomFormatter();
                case 77: return new MessagePack.Formatters.Elympics.Rooms.Models.ListedRoomChangeFormatter();
                case 78: return new MessagePack.Formatters.Elympics.Rooms.Models.MatchDataFormatter();
                case 79: return new MessagePack.Formatters.Elympics.Rooms.Models.MatchDetailsFormatter();
                case 80: return new MessagePack.Formatters.Elympics.Rooms.Models.MatchmakingDataFormatter();
                case 81: return new MessagePack.Formatters.Elympics.Rooms.Models.PublicMatchmakingDataFormatter();
                case 82: return new MessagePack.Formatters.Elympics.Rooms.Models.PublicRoomStateFormatter();
                case 83: return new MessagePack.Formatters.Elympics.Rooms.Models.RollingBetFormatter();
                case 84: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomBetDetailsFormatter();
                case 85: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomBetDetailsSlimFormatter();
                case 86: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomChainFormatter();
                case 87: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomCoinFormatter();
                case 88: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomCurrencyFormatter();
                case 89: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomIdOperationResultFormatter();
                case 90: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomListChangedFormatter();
                case 91: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomStateChangedFormatter();
                case 92: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomTournamentDetailsFormatter();
                case 93: return new MessagePack.Formatters.Elympics.Rooms.Models.RoomWasLeftFormatter();
                case 94: return new MessagePack.Formatters.Elympics.Rooms.Models.SetReadyFormatter();
                case 95: return new MessagePack.Formatters.Elympics.Rooms.Models.SetRoomParametersFormatter();
                case 96: return new MessagePack.Formatters.Elympics.Rooms.Models.SetUnreadyFormatter();
                case 97: return new MessagePack.Formatters.Elympics.Rooms.Models.StartMatchmakingFormatter();
                case 98: return new MessagePack.Formatters.Elympics.Rooms.Models.UnwatchRoomsFormatter();
                case 99: return new MessagePack.Formatters.Elympics.Rooms.Models.WatchRoomsFormatter();
                case 100: return new MessagePack.Formatters.Elympics.SnapshotAnalysis.CollectorMatchDataFormatter();
                case 101: return new MessagePack.Formatters.Elympics.SnapshotAnalysis.Serialization.SnapshotSerializationPackageFormatter();
                case 102: return new MessagePack.Formatters.Elympics.SnapshotAnalysis.SnapshotSaverInitDataFormatter();
                case 103: return new MessagePack.Formatters.Elympics.TickToPlayerInputFormatter();
                case 104: return new MessagePack.Formatters.Elympics.UserInfoFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics
{

    public sealed class ErrorBlameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ErrorBlame>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ErrorBlame value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.ErrorBlame Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.ErrorBlame)reader.ReadInt32();
        }
    }

    public sealed class ErrorKindFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ErrorKind>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ErrorKind value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.ErrorKind Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.ErrorKind)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket
{

    public sealed class ErrorBlameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame)reader.ReadInt32();
        }
    }

    public sealed class MatchmakerStatusCodesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Rooms.Models
{

    public sealed class ChainTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.ChainType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.ChainType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.Rooms.Models.ChainType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.Rooms.Models.ChainType)reader.ReadInt32();
        }
    }

    public sealed class LeavingReasonFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.LeavingReason>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.LeavingReason value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.Rooms.Models.LeavingReason Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.Rooms.Models.LeavingReason)reader.ReadInt32();
        }
    }

    public sealed class MatchmakingStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.MatchmakingState>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.MatchmakingState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.Rooms.Models.MatchmakingState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.Rooms.Models.MatchmakingState)reader.ReadInt32();
        }
    }

    public sealed class MatchStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.MatchState>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.MatchState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Int32)value);
        }

        public global::Elympics.Rooms.Models.MatchState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Elympics.Rooms.Models.MatchState)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics
{
    public sealed class ElympicsDataWithTickFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsDataWithTick>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public ElympicsDataWithTickFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(3, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.ElympicsSnapshot).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.ElympicsInput).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Elympics.ElympicsRpcMessageList).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(3)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsDataWithTick value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsSnapshot>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsSnapshot)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsInput>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsInput)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsRpcMessageList>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsRpcMessageList)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.ElympicsDataWithTick Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.ElympicsDataWithTick");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.ElympicsDataWithTick result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.ElympicsDataWithTick)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsSnapshot>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.ElympicsDataWithTick)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsInput>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Elympics.ElympicsDataWithTick)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsRpcMessageList>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IFromServerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.IFromServer>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IFromServerFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.ElympicsSnapshot).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.ElympicsRpcMessageList).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.IFromServer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsSnapshot>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsSnapshot)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsRpcMessageList>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsRpcMessageList)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.IFromServer Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.IFromServer");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.IFromServer result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.IFromServer)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsSnapshot>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.IFromServer)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsRpcMessageList>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IToServerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.IToServer>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IToServerFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.ElympicsInputList).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.ElympicsRpcMessageList).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.IToServer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsInputList>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsInputList)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsRpcMessageList>(options.Resolver).Serialize(ref writer, (global::Elympics.ElympicsRpcMessageList)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.IToServer Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.IToServer");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.IToServer result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.IToServer)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsInputList>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.IToServer)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsRpcMessageList>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Lobby.Models
{
    public sealed class IFromLobbyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Lobby.Models.IFromLobby>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IFromLobbyFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(10, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.Lobby.Models.Ping).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.Lobby.Models.Pong).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Elympics.Lobby.Models.OperationResult).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Elympics.Rooms.Models.RoomStateChanged).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::Elympics.Rooms.Models.RoomWasLeft).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
                { typeof(global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(5, 5) },
                { typeof(global::Elympics.Rooms.Models.RoomIdOperationResult).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(6, 6) },
                { typeof(global::Elympics.Rooms.Models.RoomListChanged).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(7, 7) },
                { typeof(global::Elympics.Rooms.Models.GameDataResponse).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(8, 8) },
                { typeof(global::Communication.Lobby.Models.ToLobby.RollingsResponse).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(9, 9) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(10)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
                { 9, 9 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Lobby.Models.IFromLobby value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Ping>(options.Resolver).Serialize(ref writer, (global::Elympics.Lobby.Models.Ping)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Pong>(options.Resolver).Serialize(ref writer, (global::Elympics.Lobby.Models.Pong)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.OperationResult>(options.Resolver).Serialize(ref writer, (global::Elympics.Lobby.Models.OperationResult)value, options);
                        break;
                    case 3:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomStateChanged>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.RoomStateChanged)value, options);
                        break;
                    case 4:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomWasLeft>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.RoomWasLeft)value, options);
                        break;
                    case 5:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse>(options.Resolver).Serialize(ref writer, (global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse)value, options);
                        break;
                    case 6:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomIdOperationResult>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.RoomIdOperationResult)value, options);
                        break;
                    case 7:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomListChanged>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.RoomListChanged)value, options);
                        break;
                    case 8:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.GameDataResponse>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.GameDataResponse)value, options);
                        break;
                    case 9:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Communication.Lobby.Models.ToLobby.RollingsResponse>(options.Resolver).Serialize(ref writer, (global::Communication.Lobby.Models.ToLobby.RollingsResponse)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.Lobby.Models.IFromLobby Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.Lobby.Models.IFromLobby");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.Lobby.Models.IFromLobby result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Ping>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Pong>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.OperationResult>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomStateChanged>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomWasLeft>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomIdOperationResult>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomListChanged>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.GameDataResponse>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 9:
                    result = (global::Elympics.Lobby.Models.IFromLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Communication.Lobby.Models.ToLobby.RollingsResponse>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IToLobbyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Lobby.Models.IToLobby>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IToLobbyFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(17, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.Lobby.Models.Ping).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.Lobby.Models.Pong).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Elympics.Lobby.Models.JoinLobby).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Elympics.Rooms.Models.CreateRoom).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::Elympics.Rooms.Models.JoinWithRoomId).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
                { typeof(global::Elympics.Rooms.Models.LeaveRoom).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(5, 5) },
                { typeof(global::Elympics.Rooms.Models.ChangeTeam).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(6, 6) },
                { typeof(global::Elympics.Rooms.Models.SetReady).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(7, 7) },
                { typeof(global::Elympics.Rooms.Models.SetUnready).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(8, 8) },
                { typeof(global::Elympics.Rooms.Models.StartMatchmaking).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(9, 9) },
                { typeof(global::Elympics.Rooms.Models.CancelMatchmaking).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(10, 10) },
                { typeof(global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(11, 11) },
                { typeof(global::Elympics.Rooms.Models.JoinWithJoinCode).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(12, 12) },
                { typeof(global::Elympics.Rooms.Models.SetRoomParameters).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(13, 13) },
                { typeof(global::Elympics.Rooms.Models.WatchRooms).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(14, 14) },
                { typeof(global::Elympics.Rooms.Models.UnwatchRooms).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(15, 15) },
                { typeof(global::Communication.Lobby.Models.ToLobby.RequestRollings).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(16, 16) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(17)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
                { 7, 7 },
                { 8, 8 },
                { 9, 9 },
                { 10, 10 },
                { 11, 11 },
                { 12, 12 },
                { 13, 13 },
                { 14, 14 },
                { 15, 15 },
                { 16, 16 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Lobby.Models.IToLobby value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Ping>(options.Resolver).Serialize(ref writer, (global::Elympics.Lobby.Models.Ping)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Pong>(options.Resolver).Serialize(ref writer, (global::Elympics.Lobby.Models.Pong)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.JoinLobby>(options.Resolver).Serialize(ref writer, (global::Elympics.Lobby.Models.JoinLobby)value, options);
                        break;
                    case 3:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.CreateRoom>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.CreateRoom)value, options);
                        break;
                    case 4:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.JoinWithRoomId>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.JoinWithRoomId)value, options);
                        break;
                    case 5:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.LeaveRoom>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.LeaveRoom)value, options);
                        break;
                    case 6:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.ChangeTeam>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.ChangeTeam)value, options);
                        break;
                    case 7:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.SetReady>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.SetReady)value, options);
                        break;
                    case 8:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.SetUnready>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.SetUnready)value, options);
                        break;
                    case 9:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.StartMatchmaking>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.StartMatchmaking)value, options);
                        break;
                    case 10:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.CancelMatchmaking>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.CancelMatchmaking)value, options);
                        break;
                    case 11:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth>(options.Resolver).Serialize(ref writer, (global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth)value, options);
                        break;
                    case 12:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.JoinWithJoinCode>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.JoinWithJoinCode)value, options);
                        break;
                    case 13:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.SetRoomParameters>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.SetRoomParameters)value, options);
                        break;
                    case 14:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.WatchRooms>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.WatchRooms)value, options);
                        break;
                    case 15:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.UnwatchRooms>(options.Resolver).Serialize(ref writer, (global::Elympics.Rooms.Models.UnwatchRooms)value, options);
                        break;
                    case 16:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Communication.Lobby.Models.ToLobby.RequestRollings>(options.Resolver).Serialize(ref writer, (global::Communication.Lobby.Models.ToLobby.RequestRollings)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.Lobby.Models.IToLobby Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.Lobby.Models.IToLobby");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.Lobby.Models.IToLobby result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Ping>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.Pong>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Lobby.Models.JoinLobby>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.CreateRoom>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.JoinWithRoomId>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.LeaveRoom>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.ChangeTeam>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 7:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.SetReady>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 8:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.SetUnready>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 9:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.StartMatchmaking>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 10:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.CancelMatchmaking>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 11:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 12:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.JoinWithJoinCode>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 13:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.SetRoomParameters>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 14:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.WatchRooms>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 15:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.UnwatchRooms>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 16:
                    result = (global::Elympics.Lobby.Models.IToLobby)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Communication.Lobby.Models.ToLobby.RequestRollings>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket
{
    public sealed class IFromMatchmakerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IFromMatchmakerFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(5, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.Ping).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.Pong).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchFound).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchData).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(5)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Ping>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.Ping)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Pong>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.Pong)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchFound>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.MatchFound)value, options);
                        break;
                    case 3:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchData>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.MatchData)value, options);
                        break;
                    case 4:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Ping>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Pong>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchFound>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchData>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IFromMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }

    public sealed class IToMatchmakerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IToMatchmakerFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(4, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.Ping).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.Pong).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.GameData).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(4)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Ping>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.Ping)value, options);
                        break;
                    case 1:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Pong>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.Pong)value, options);
                        break;
                    case 2:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.GameData>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.GameData)value, options);
                        break;
                    case 3:
                        global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker>(options.Resolver).Serialize(ref writer, (global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker result = null;
            switch (key)
            {
                case 0:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Ping>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.Pong>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.GameData>(options.Resolver).Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Elympics.Models.Matchmaking.WebSocket.IToMatchmaker)global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker>(options.Resolver).Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Communication.Lobby.Models.ToLobby
{
    public sealed class RequestRollingsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Communication.Lobby.Models.ToLobby.RequestRollings>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Communication.Lobby.Models.ToLobby.RequestRollings value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.GameId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.VersionId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingRequestDto>>(formatterResolver).Serialize(ref writer, value.Rollings, options);
        }

        public global::Communication.Lobby.Models.ToLobby.RequestRollings Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __GameId__ = default(global::System.Guid);
            var __VersionId__ = default(string);
            var __Rollings__ = default(global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingRequestDto>);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __GameId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __VersionId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Rollings__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingRequestDto>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Communication.Lobby.Models.ToLobby.RequestRollings(__OperationId__, __GameId__, __VersionId__, __Rollings__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RollingRequestDtoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Communication.Lobby.Models.ToLobby.RollingRequestDto>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Communication.Lobby.Models.ToLobby.RollingRequestDto value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.CoinId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Prize, options);
            writer.Write(value.PlayersCount);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.PrizeDistribution, options);
        }

        public global::Communication.Lobby.Models.ToLobby.RollingRequestDto Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __CoinId__ = default(global::System.Guid);
            var __Prize__ = default(string);
            var __PlayersCount__ = default(uint);
            var __PrizeDistribution__ = default(float[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __CoinId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Prize__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __PlayersCount__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __PrizeDistribution__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Communication.Lobby.Models.ToLobby.RollingRequestDto(__CoinId__, __Prize__, __PlayersCount__, __PrizeDistribution__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RollingResponseDtoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Communication.Lobby.Models.ToLobby.RollingResponseDto>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Communication.Lobby.Models.ToLobby.RollingResponseDto value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RollingTournamentBetConfigId, options);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EntryFee, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Error, options);
        }

        public global::Communication.Lobby.Models.ToLobby.RollingResponseDto Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Communication.Lobby.Models.ToLobby.RollingResponseDto();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.RollingTournamentBetConfigId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.EntryFee = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.Error = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RollingsResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Communication.Lobby.Models.ToLobby.RollingsResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Communication.Lobby.Models.ToLobby.RollingsResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingResponseDto>>(formatterResolver).Serialize(ref writer, value.Rollings, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RequestId, options);
        }

        public global::Communication.Lobby.Models.ToLobby.RollingsResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Rollings__ = default(global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingResponseDto>);
            var __RequestId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Rollings__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Communication.Lobby.Models.ToLobby.RollingResponseDto>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RequestId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Communication.Lobby.Models.ToLobby.RollingsResponse(__Rollings__, __RequestId__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Communication.Lobby.Models.FromLobby
{
    public sealed class ShowAuthResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.UserId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AuthType, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EthAddress, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Nickname, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AvatarUrl, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RequestId, options);
        }

        public global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UserId__ = default(global::System.Guid);
            var __AuthType__ = default(string);
            var __EthAddress__ = default(string);
            var __Nickname__ = default(string);
            var __AvatarUrl__ = default(string);
            var __RequestId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __UserId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __AuthType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EthAddress__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Nickname__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AvatarUrl__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        __RequestId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Communication.Lobby.Models.FromLobby.ShowAuthResponse(__UserId__, __AuthType__, __EthAddress__, __Nickname__, __AvatarUrl__, __RequestId__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Communication.Lobby.Models.ToLobby
{
    public sealed class ShowAuthFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
        }

        public global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Communication.Lobby.Models.ToLobby.ShowAuth(__OperationId__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics
{
    public sealed class ElympicsBehaviourMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsBehaviourMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsBehaviourMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            writer.Write(value.NetworkId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsPlayer>(formatterResolver).Serialize(ref writer, value.PredictableFor, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.PrefabName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<(string, global::System.Collections.Generic.List<(string, string)>)>>(formatterResolver).Serialize(ref writer, value.StateMetadata, options);
        }

        public global::Elympics.ElympicsBehaviourMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsBehaviourMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.NetworkId = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.PredictableFor = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsPlayer>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.PrefabName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.StateMetadata = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<(string, global::System.Collections.Generic.List<(string, string)>)>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsInputFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsInput>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsInput value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.Tick);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsPlayer>(formatterResolver).Serialize(ref writer, value.Player, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::Elympics.ElympicsInput Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsInput();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Tick = reader.ReadInt64();
                        break;
                    case 1:
                        ____result.Player = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsPlayer>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsInputListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsInputList>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsInputList value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IList<global::Elympics.ElympicsInput>>(formatterResolver).Serialize(ref writer, value.Values, options);
            writer.Write(value.LastReceivedSnapshot);
        }

        public global::Elympics.ElympicsInputList Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsInputList();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Values = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IList<global::Elympics.ElympicsInput>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.LastReceivedSnapshot = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsPlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsPlayer>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsPlayer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::Elympics.ElympicsPlayer Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            reader.Skip();
            return new global::Elympics.ElympicsPlayer();
        }
    }

    public sealed class ElympicsRpcMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsRpcMessage>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsRpcMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.NetworkId);
            writer.Write(value.MethodId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<object[]>(formatterResolver).Serialize(ref writer, value.Arguments, options);
        }

        public global::Elympics.ElympicsRpcMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __NetworkId__ = default(int);
            var __MethodId__ = default(ushort);
            var __Arguments__ = default(object[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __NetworkId__ = reader.ReadInt32();
                        break;
                    case 1:
                        __MethodId__ = reader.ReadUInt16();
                        break;
                    case 2:
                        __Arguments__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<object[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.ElympicsRpcMessage(__NetworkId__, __MethodId__, __Arguments__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsRpcMessageListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsRpcMessageList>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsRpcMessageList value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Tick);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Elympics.ElympicsRpcMessage>>(formatterResolver).Serialize(ref writer, value.Messages, options);
        }

        public global::Elympics.ElympicsRpcMessageList Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsRpcMessageList();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Tick = reader.ReadInt64();
                        break;
                    case 1:
                        ____result.Messages = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Elympics.ElympicsRpcMessage>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsSnapshotFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsSnapshot>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsSnapshot value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.Tick);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.TickStartUtc, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.FactoryState>(formatterResolver).Serialize(ref writer, value.Factory, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Serialize(ref writer, value.Data, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Elympics.TickToPlayerInput>>(formatterResolver).Serialize(ref writer, value.TickToPlayersInputData, options);
        }

        public global::Elympics.ElympicsSnapshot Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsSnapshot();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Tick = reader.ReadInt64();
                        break;
                    case 1:
                        ____result.TickStartUtc = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Factory = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.FactoryState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.TickToPlayersInputData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Elympics.TickToPlayerInput>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsSnapshotPlayerInputFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsSnapshotPlayerInput>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsSnapshotPlayerInput value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::Elympics.ElympicsSnapshotPlayerInput Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsSnapshotPlayerInput();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ElympicsSnapshotWithMetadataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.ElympicsSnapshotWithMetadata>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.ElympicsSnapshotWithMetadata value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            writer.Write(value.Tick);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.TickStartUtc, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.FactoryState>(formatterResolver).Serialize(ref writer, value.Factory, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Serialize(ref writer, value.Data, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Elympics.TickToPlayerInput>>(formatterResolver).Serialize(ref writer, value.TickToPlayersInputData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.TickEndUtc, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Elympics.ElympicsBehaviourMetadata>>(formatterResolver).Serialize(ref writer, value.Metadata, options);
        }

        public global::Elympics.ElympicsSnapshotWithMetadata Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.ElympicsSnapshotWithMetadata();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Tick = reader.ReadInt64();
                        break;
                    case 1:
                        ____result.TickStartUtc = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Factory = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.FactoryState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.TickToPlayersInputData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, global::Elympics.TickToPlayerInput>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.TickEndUtc = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.Metadata = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Elympics.ElympicsBehaviourMetadata>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FactoryStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.FactoryState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.FactoryState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Serialize(ref writer, value.Parts, options);
        }

        public global::Elympics.FactoryState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.FactoryState();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Parts = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<int, byte[]>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InitialMatchPlayerDataGuidFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.InitialMatchPlayerDataGuid>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.InitialMatchPlayerDataGuid value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsPlayer>(formatterResolver).Serialize(ref writer, value.Player, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.UserId, options);
            writer.Write(value.IsBot);
            writer.Write(value.BotDifficulty);
            writer.Write(value.GameEngineData);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.MatchmakerData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Serialize(ref writer, value.TeamIndex, options);
        }

        public global::Elympics.InitialMatchPlayerDataGuid Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.InitialMatchPlayerDataGuid();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Player = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsPlayer>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.IsBot = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.BotDifficulty = reader.ReadDouble();
                        break;
                    case 4:
                        ____result.GameEngineData = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 5:
                        ____result.MatchmakerData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.RoomId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        ____result.TeamIndex = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class TickToPlayerInputFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.TickToPlayerInput>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.TickToPlayerInput value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, global::Elympics.ElympicsSnapshotPlayerInput>>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::Elympics.TickToPlayerInput Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.TickToPlayerInput();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<long, global::Elympics.ElympicsSnapshotPlayerInput>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.UserInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.UserInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.UserId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Serialize(ref writer, value.TeamIndex, options);
            writer.Write(value.IsReady);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Nickname, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.AvatarUrl, options);
        }

        public global::Elympics.UserInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __UserId__ = default(global::System.Guid);
            var __TeamIndex__ = default(uint?);
            var __IsReady__ = default(bool);
            var __Nickname__ = default(string);
            var __AvatarUrl__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __UserId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TeamIndex__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __IsReady__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __Nickname__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AvatarUrl__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.UserInfo(__UserId__, __TeamIndex__, __IsReady__, __Nickname__, __AvatarUrl__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Lobby.Models
{
    public sealed class JoinLobbyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Lobby.Models.JoinLobby>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Lobby.Models.JoinLobby value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.SdkVersion, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.GameId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.GameVersion, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RegionName, options);
        }

        public global::Elympics.Lobby.Models.JoinLobby Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SdkVersion__ = default(string);
            var __GameId__ = default(global::System.Guid);
            var __GameVersion__ = default(string);
            var __RegionName__ = default(string);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __SdkVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GameId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __GameVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __RegionName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Lobby.Models.JoinLobby(__OperationId__, __SdkVersion__, __GameId__, __GameVersion__, __RegionName__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class OperationResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Lobby.Models.OperationResult>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Lobby.Models.OperationResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            writer.Write(value.Success);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorBlame?>(formatterResolver).Serialize(ref writer, value.Blame, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorKind?>(formatterResolver).Serialize(ref writer, value.Kind, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Details, options);
        }

        public global::Elympics.Lobby.Models.OperationResult Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OperationId__ = default(global::System.Guid);
            var __Success__ = default(bool);
            var __Blame__ = default(global::Elympics.ErrorBlame?);
            var __Kind__ = default(global::Elympics.ErrorKind?);
            var __Details__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Success__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __Blame__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorBlame?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Kind__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorKind?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Details__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Lobby.Models.OperationResult(__OperationId__, __Success__, __Blame__, __Kind__, __Details__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Lobby.Models.Ping>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Lobby.Models.Ping value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Elympics.Lobby.Models.Ping Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            return new global::Elympics.Lobby.Models.Ping();
        }
    }

    public sealed class PongFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Lobby.Models.Pong>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Lobby.Models.Pong value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(0);
        }

        public global::Elympics.Lobby.Models.Pong Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            reader.Skip();
            return new global::Elympics.Lobby.Models.Pong();
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Models.Matchmaking.WebSocket
{
    public sealed class GameDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.GameData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.GameData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.SdkVersion, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.GameId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.GameVersion, options);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.GameData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SdkVersion__ = default(string);
            var __GameId__ = default(global::System.Guid);
            var __GameVersion__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SdkVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __GameId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GameVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Models.Matchmaking.WebSocket.GameData(__SdkVersion__, __GameId__, __GameVersion__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinMatchmakerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.QueueName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RegionName, options);
            writer.Write(value.GameEngineData);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.MatchmakerData, options);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __QueueName__ = default(string);
            var __RegionName__ = default(string);
            var __GameEngineData__ = default(byte[]);
            var __MatchmakerData__ = default(float[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __QueueName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RegionName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GameEngineData__ = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 3:
                        __MatchmakerData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Models.Matchmaking.WebSocket.JoinMatchmaker(__QueueName__, __RegionName__, __GameEngineData__, __MatchmakerData__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MatchDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.MatchData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.MatchData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.MatchId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserSecret, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.QueueName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RegionName, options);
            writer.Write(value.GameEngineData);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.MatchmakerData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TcpUdpServerAddress, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.WebServerAddress, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid[]>(formatterResolver).Serialize(ref writer, value.MatchedPlayersId, options);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.MatchData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MatchId__ = default(global::System.Guid);
            var __UserSecret__ = default(string);
            var __QueueName__ = default(string);
            var __RegionName__ = default(string);
            var __GameEngineData__ = default(byte[]);
            var __MatchmakerData__ = default(float[]);
            var __TcpUdpServerAddress__ = default(string);
            var __WebServerAddress__ = default(string);
            var __MatchedPlayersId__ = default(global::System.Guid[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MatchId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __UserSecret__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __QueueName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __RegionName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __GameEngineData__ = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 5:
                        __MatchmakerData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __TcpUdpServerAddress__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        __WebServerAddress__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        __MatchedPlayersId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Models.Matchmaking.WebSocket.MatchData(__MatchId__, __UserSecret__, __QueueName__, __RegionName__, __GameEngineData__, __MatchmakerData__, __TcpUdpServerAddress__, __WebServerAddress__, __MatchedPlayersId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MatchFoundFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.MatchFound>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.MatchFound value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.MatchId, options);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.MatchFound Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MatchId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MatchId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Models.Matchmaking.WebSocket.MatchFound(__MatchId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MatchmakingErrorFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame>(formatterResolver).Serialize(ref writer, value.ErrorBlame, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes>(formatterResolver).Serialize(ref writer, value.StatusCode, options);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __ErrorBlame__ = default(global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame);
            var __StatusCode__ = default(global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __ErrorBlame__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.ErrorBlame>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __StatusCode__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Models.Matchmaking.WebSocket.MatchmakerStatusCodes>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Models.Matchmaking.WebSocket.MatchmakingError(__ErrorBlame__, __StatusCode__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.Ping>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.Ping value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.Ping Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            reader.Skip();
            return new global::Elympics.Models.Matchmaking.WebSocket.Ping();
        }
    }

    public sealed class PongFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Models.Matchmaking.WebSocket.Pong>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Models.Matchmaking.WebSocket.Pong value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.WriteArrayHeader(0);
        }

        public global::Elympics.Models.Matchmaking.WebSocket.Pong Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            reader.Skip();
            return new global::Elympics.Models.Matchmaking.WebSocket.Pong();
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.Rooms.Models
{
    public sealed class CancelMatchmakingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.CancelMatchmaking>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.CancelMatchmaking value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
        }

        public global::Elympics.Rooms.Models.CancelMatchmaking Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.CancelMatchmaking(__OperationId__, __RoomId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChangeTeamFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.ChangeTeam>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.ChangeTeam value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Serialize(ref writer, value.TeamIndex, options);
        }

        public global::Elympics.Rooms.Models.ChangeTeam Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __TeamIndex__ = default(uint?);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TeamIndex__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.ChangeTeam(__OperationId__, __RoomId__, __TeamIndex__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class CreateRoomFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.CreateRoom>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.CreateRoom value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            writer.Write(value.IsPrivate);
            writer.Write(value.IsEphemeral);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.QueueName, options);
            writer.Write(value.IsSingleTeam);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomRoomData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomMatchmakingData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomTournamentDetails>(formatterResolver).Serialize(ref writer, value.TournamentDetails, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetailsSlim>(formatterResolver).Serialize(ref writer, value.BetDetailsSlim, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Serialize(ref writer, value.RollingTournamentBetConfigId, options);
        }

        public global::Elympics.Rooms.Models.CreateRoom Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __IsPrivate__ = default(bool);
            var __IsEphemeral__ = default(bool);
            var __QueueName__ = default(string);
            var __IsSingleTeam__ = default(bool);
            var __CustomRoomData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);
            var __CustomMatchmakingData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);
            var __TournamentDetails__ = default(global::Elympics.Rooms.Models.RoomTournamentDetails);
            var __BetDetailsSlim__ = default(global::Elympics.Rooms.Models.RoomBetDetailsSlim);
            var __RollingTournamentBetConfigId__ = default(global::System.Guid?);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __IsPrivate__ = reader.ReadBoolean();
                        break;
                    case 3:
                        __IsEphemeral__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __QueueName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        __IsSingleTeam__ = reader.ReadBoolean();
                        break;
                    case 6:
                        __CustomRoomData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        __CustomMatchmakingData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        __TournamentDetails__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomTournamentDetails>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 9:
                        __BetDetailsSlim__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetailsSlim>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 10:
                        __RollingTournamentBetConfigId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.CreateRoom(__OperationId__, __RoomName__, __IsPrivate__, __IsEphemeral__, __QueueName__, __IsSingleTeam__, __CustomRoomData__, __CustomMatchmakingData__, __TournamentDetails__, __BetDetailsSlim__, __RollingTournamentBetConfigId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameDataResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.GameDataResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.GameDataResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.JoinedMatchRooms);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Elympics.Rooms.Models.RoomCoin>>(formatterResolver).Serialize(ref writer, value.CoinData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.GameVersionId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FleetName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RequestId, options);
        }

        public global::Elympics.Rooms.Models.GameDataResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __JoinedMatchRooms__ = default(int);
            var __CoinData__ = default(global::System.Collections.Generic.List<global::Elympics.Rooms.Models.RoomCoin>);
            var __GameVersionId__ = default(string);
            var __FleetName__ = default(string);
            var __RequestId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __JoinedMatchRooms__ = reader.ReadInt32();
                        break;
                    case 1:
                        __CoinData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Elympics.Rooms.Models.RoomCoin>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GameVersionId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __FleetName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __RequestId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.GameDataResponse(__JoinedMatchRooms__, __CoinData__, __GameVersionId__, __FleetName__, __RequestId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinWithJoinCodeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.JoinWithJoinCode>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.JoinWithJoinCode value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JoinCode, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Serialize(ref writer, value.TeamIndex, options);
        }

        public global::Elympics.Rooms.Models.JoinWithJoinCode Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __JoinCode__ = default(string);
            var __TeamIndex__ = default(uint?);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __JoinCode__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TeamIndex__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.JoinWithJoinCode(__OperationId__, __JoinCode__, __TeamIndex__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinWithRoomIdFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.JoinWithRoomId>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.JoinWithRoomId value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Serialize(ref writer, value.TeamIndex, options);
        }

        public global::Elympics.Rooms.Models.JoinWithRoomId Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __TeamIndex__ = default(uint?);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TeamIndex__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<uint?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.JoinWithRoomId(__OperationId__, __RoomId__, __TeamIndex__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LeaveRoomFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.LeaveRoom>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.LeaveRoom value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
        }

        public global::Elympics.Rooms.Models.LeaveRoom Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.LeaveRoom(__OperationId__, __RoomId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ListedRoomChangeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.ListedRoomChange>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.ListedRoomChange value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.PublicRoomState>(formatterResolver).Serialize(ref writer, value.PublicRoomState, options);
        }

        public global::Elympics.Rooms.Models.ListedRoomChange Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __PublicRoomState__ = default(global::Elympics.Rooms.Models.PublicRoomState);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __PublicRoomState__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.PublicRoomState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.ListedRoomChange(__RoomId__, __PublicRoomState__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MatchDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.MatchData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.MatchData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.MatchId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchState>(formatterResolver).Serialize(ref writer, value.State, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchDetails>(formatterResolver).Serialize(ref writer, value.MatchDetails, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.FailReason, options);
        }

        public global::Elympics.Rooms.Models.MatchData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MatchId__ = default(global::System.Guid);
            var __State__ = default(global::Elympics.Rooms.Models.MatchState);
            var __MatchDetails__ = default(global::Elympics.Rooms.Models.MatchDetails);
            var __FailReason__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MatchId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __State__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __MatchDetails__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchDetails>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __FailReason__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.MatchData(__MatchId__, __State__, __MatchDetails__, __FailReason__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MatchDetailsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.MatchDetails>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.MatchDetails value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::System.Guid>>(formatterResolver).Serialize(ref writer, value.MatchedPlayersId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TcpUdpServerAddress, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.WebServerAddress, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserSecret, options);
            writer.Write(value.GameEngineData);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.MatchmakerData, options);
        }

        public global::Elympics.Rooms.Models.MatchDetails Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __MatchedPlayersId__ = default(global::System.Collections.Generic.IReadOnlyList<global::System.Guid>);
            var __TcpUdpServerAddress__ = default(string);
            var __WebServerAddress__ = default(string);
            var __UserSecret__ = default(string);
            var __GameEngineData__ = default(byte[]);
            var __MatchmakerData__ = default(float[]);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __MatchedPlayersId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::System.Guid>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TcpUdpServerAddress__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __WebServerAddress__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __UserSecret__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __GameEngineData__ = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 5:
                        __MatchmakerData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.MatchDetails(__MatchedPlayersId__, __TcpUdpServerAddress__, __WebServerAddress__, __UserSecret__, __GameEngineData__, __MatchmakerData__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MatchmakingDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.MatchmakingData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.MatchmakingData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.LastStateUpdate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchmakingState>(formatterResolver).Serialize(ref writer, value.State, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.QueueName, options);
            writer.Write(value.TeamCount);
            writer.Write(value.TeamSize);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchData>(formatterResolver).Serialize(ref writer, value.MatchData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomTournamentDetails>(formatterResolver).Serialize(ref writer, value.TournamentDetails, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetails>(formatterResolver).Serialize(ref writer, value.BetDetails, options);
        }

        public global::Elympics.Rooms.Models.MatchmakingData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LastStateUpdate__ = default(global::System.DateTime);
            var __State__ = default(global::Elympics.Rooms.Models.MatchmakingState);
            var __QueueName__ = default(string);
            var __TeamCount__ = default(uint);
            var __TeamSize__ = default(uint);
            var __CustomData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);
            var __MatchData__ = default(global::Elympics.Rooms.Models.MatchData);
            var __TournamentDetails__ = default(global::Elympics.Rooms.Models.RoomTournamentDetails);
            var __BetDetails__ = default(global::Elympics.Rooms.Models.RoomBetDetails);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __LastStateUpdate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __State__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchmakingState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __QueueName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TeamCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __TeamSize__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __CustomData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __MatchData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchData>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        __TournamentDetails__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomTournamentDetails>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        __BetDetails__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetails>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.MatchmakingData(__LastStateUpdate__, __State__, __QueueName__, __TeamCount__, __TeamSize__, __CustomData__, __MatchData__, __TournamentDetails__, __BetDetails__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PublicMatchmakingDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.PublicMatchmakingData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.PublicMatchmakingData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.LastStateUpdate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchmakingState>(formatterResolver).Serialize(ref writer, value.State, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.QueueName, options);
            writer.Write(value.TeamCount);
            writer.Write(value.TeamSize);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetails>(formatterResolver).Serialize(ref writer, value.BetDetails, options);
        }

        public global::Elympics.Rooms.Models.PublicMatchmakingData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LastStateUpdate__ = default(global::System.DateTime);
            var __State__ = default(global::Elympics.Rooms.Models.MatchmakingState);
            var __QueueName__ = default(string);
            var __TeamCount__ = default(uint);
            var __TeamSize__ = default(uint);
            var __CustomData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);
            var __BetDetails__ = default(global::Elympics.Rooms.Models.RoomBetDetails);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __LastStateUpdate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __State__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchmakingState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __QueueName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __TeamCount__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __TeamSize__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __CustomData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __BetDetails__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetails>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.PublicMatchmakingData(__LastStateUpdate__, __State__, __QueueName__, __TeamCount__, __TeamSize__, __CustomData__, __BetDetails__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PublicRoomStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.PublicRoomState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.PublicRoomState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.LastUpdate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            writer.Write(value.HasPrivilegedHost);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.PublicMatchmakingData>(formatterResolver).Serialize(ref writer, value.MatchmakingData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>>(formatterResolver).Serialize(ref writer, value.Users, options);
            writer.Write(value.IsPrivate);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomData, options);
        }

        public global::Elympics.Rooms.Models.PublicRoomState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __LastUpdate__ = default(global::System.DateTime);
            var __RoomName__ = default(string);
            var __HasPrivilegedHost__ = default(bool);
            var __MatchmakingData__ = default(global::Elympics.Rooms.Models.PublicMatchmakingData);
            var __Users__ = default(global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>);
            var __IsPrivate__ = default(bool);
            var __CustomData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __LastUpdate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __RoomName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __HasPrivilegedHost__ = reader.ReadBoolean();
                        break;
                    case 4:
                        __MatchmakingData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.PublicMatchmakingData>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Users__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __IsPrivate__ = reader.ReadBoolean();
                        break;
                    case 7:
                        __CustomData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.PublicRoomState(__RoomId__, __LastUpdate__, __RoomName__, __HasPrivilegedHost__, __MatchmakingData__, __Users__, __IsPrivate__, __CustomData__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RollingBetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RollingBet>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RollingBet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RollingBetId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int?>(formatterResolver).Serialize(ref writer, value.NumberOfPlayers, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.EntryFee, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Prize, options);
        }

        public global::Elympics.Rooms.Models.RollingBet Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RollingBetId__ = default(global::System.Guid);
            var __NumberOfPlayers__ = default(int?);
            var __EntryFee__ = default(string);
            var __Prize__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RollingBetId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __NumberOfPlayers__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<int?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EntryFee__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Prize__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RollingBet(__RollingBetId__, __NumberOfPlayers__, __EntryFee__, __Prize__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomBetDetailsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomBetDetails>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomBetDetails value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.BetValueRaw, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomCoin>(formatterResolver).Serialize(ref writer, value.Coin, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RollingBet>(formatterResolver).Serialize(ref writer, value.RollingBet, options);
        }

        public global::Elympics.Rooms.Models.RoomBetDetails Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __BetValueRaw__ = default(string);
            var __Coin__ = default(global::Elympics.Rooms.Models.RoomCoin);
            var __RollingBet__ = default(global::Elympics.Rooms.Models.RollingBet);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __BetValueRaw__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Coin__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomCoin>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __RollingBet__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RollingBet>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomBetDetails(__BetValueRaw__, __Coin__, __RollingBet__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomBetDetailsSlimFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomBetDetailsSlim>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomBetDetailsSlim value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.BetValue, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.CoinId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Serialize(ref writer, value.RollingBetId, options);
        }

        public global::Elympics.Rooms.Models.RoomBetDetailsSlim Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __BetValue__ = default(string);
            var __CoinId__ = default(global::System.Guid);
            var __RollingBetId__ = default(global::System.Guid?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __BetValue__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __CoinId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __RollingBetId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomBetDetailsSlim(__BetValue__, __CoinId__, __RollingBetId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomChainFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomChain>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomChain value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.ExternalId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.ChainType>(formatterResolver).Serialize(ref writer, value.Type, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
        }

        public global::Elympics.Rooms.Models.RoomChain Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.Rooms.Models.RoomChain();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.ExternalId = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.ChainType>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomCoinFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomCoin>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomCoin value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.CoinId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomChain>(formatterResolver).Serialize(ref writer, value.Chain, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomCurrency>(formatterResolver).Serialize(ref writer, value.Currency, options);
        }

        public global::Elympics.Rooms.Models.RoomCoin Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.Rooms.Models.RoomCoin();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.CoinId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Chain = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomChain>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Currency = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomCurrency>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomCurrencyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomCurrency>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomCurrency value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Ticker, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Address, options);
            writer.Write(value.Decimals);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.IconUrl, options);
        }

        public global::Elympics.Rooms.Models.RoomCurrency Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.Rooms.Models.RoomCurrency();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Ticker = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Address = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Decimals = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.IconUrl = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomIdOperationResultFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomIdOperationResult>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomIdOperationResult value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            writer.Write(value.Success);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorBlame?>(formatterResolver).Serialize(ref writer, value.Blame, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorKind?>(formatterResolver).Serialize(ref writer, value.Kind, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Details, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
        }

        public global::Elympics.Rooms.Models.RoomIdOperationResult Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __OperationId__ = default(global::System.Guid);
            var __Success__ = default(bool);
            var __Blame__ = default(global::Elympics.ErrorBlame?);
            var __Kind__ = default(global::Elympics.ErrorKind?);
            var __Details__ = default(string);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Success__ = reader.ReadBoolean();
                        break;
                    case 2:
                        __Blame__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorBlame?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Kind__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ErrorKind?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Details__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomIdOperationResult(__OperationId__, __Success__, __Blame__, __Kind__, __Details__, __RoomId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomListChangedFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomListChanged>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomListChanged value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::Elympics.Rooms.Models.ListedRoomChange>>(formatterResolver).Serialize(ref writer, value.Changes, options);
        }

        public global::Elympics.Rooms.Models.RoomListChanged Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Changes__ = default(global::System.Collections.Generic.IReadOnlyList<global::Elympics.Rooms.Models.ListedRoomChange>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __Changes__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::Elympics.Rooms.Models.ListedRoomChange>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomListChanged(__Changes__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomStateChangedFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomStateChanged>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomStateChanged value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.LastUpdate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.JoinCode, options);
            writer.Write(value.HasPrivilegedHost);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchmakingData>(formatterResolver).Serialize(ref writer, value.MatchmakingData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>>(formatterResolver).Serialize(ref writer, value.Users, options);
            writer.Write(value.IsPrivate);
            writer.Write(value.IsEphemeral);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomData, options);
        }

        public global::Elympics.Rooms.Models.RoomStateChanged Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __LastUpdate__ = default(global::System.DateTime);
            var __RoomName__ = default(string);
            var __JoinCode__ = default(string);
            var __HasPrivilegedHost__ = default(bool);
            var __MatchmakingData__ = default(global::Elympics.Rooms.Models.MatchmakingData);
            var __Users__ = default(global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>);
            var __IsPrivate__ = default(bool);
            var __IsEphemeral__ = default(bool);
            var __CustomData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __LastUpdate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __RoomName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __JoinCode__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __HasPrivilegedHost__ = reader.ReadBoolean();
                        break;
                    case 5:
                        __MatchmakingData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.MatchmakingData>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Users__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyList<global::Elympics.UserInfo>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        __IsPrivate__ = reader.ReadBoolean();
                        break;
                    case 8:
                        __IsEphemeral__ = reader.ReadBoolean();
                        break;
                    case 9:
                        __CustomData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomStateChanged(__RoomId__, __LastUpdate__, __RoomName__, __JoinCode__, __HasPrivilegedHost__, __MatchmakingData__, __Users__, __IsPrivate__, __IsEphemeral__, __CustomData__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomTournamentDetailsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomTournamentDetails>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomTournamentDetails value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.TournamentId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.ChainType?>(formatterResolver).Serialize(ref writer, value.ChainType, options);
        }

        public global::Elympics.Rooms.Models.RoomTournamentDetails Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TournamentId__ = default(string);
            var __ChainType__ = default(global::Elympics.Rooms.Models.ChainType?);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __TournamentId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __ChainType__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.ChainType?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomTournamentDetails(__TournamentId__, __ChainType__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomWasLeftFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.RoomWasLeft>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.RoomWasLeft value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.LeavingReason>(formatterResolver).Serialize(ref writer, value.Reason, options);
        }

        public global::Elympics.Rooms.Models.RoomWasLeft Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __Reason__ = default(global::Elympics.Rooms.Models.LeavingReason);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Reason__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.LeavingReason>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.RoomWasLeft(__RoomId__, __Reason__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetReadyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.SetReady>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.SetReady value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            writer.Write(value.GameEngineData);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Serialize(ref writer, value.MatchmakerData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Serialize(ref writer, value.LastRoomUpdate, options);
        }

        public global::Elympics.Rooms.Models.SetReady Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __GameEngineData__ = default(byte[]);
            var __MatchmakerData__ = default(float[]);
            var __LastRoomUpdate__ = default(global::System.DateTime);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GameEngineData__ = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 3:
                        __MatchmakerData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<float[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __LastRoomUpdate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.DateTime>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.SetReady(__OperationId__, __RoomId__, __GameEngineData__, __MatchmakerData__, __LastRoomUpdate__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetRoomParametersFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.SetRoomParameters>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.SetRoomParameters value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<bool?>(formatterResolver).Serialize(ref writer, value.IsPrivate, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomRoomData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomMatchmakingData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomTournamentDetails>(formatterResolver).Serialize(ref writer, value.TournamentDetails, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetailsSlim>(formatterResolver).Serialize(ref writer, value.BetDetailsSlim, options);
        }

        public global::Elympics.Rooms.Models.SetRoomParameters Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __RoomName__ = default(string);
            var __IsPrivate__ = default(bool?);
            var __CustomRoomData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);
            var __CustomMatchmakingData__ = default(global::System.Collections.Generic.IReadOnlyDictionary<string, string>);
            var __TournamentDetails__ = default(global::Elympics.Rooms.Models.RoomTournamentDetails);
            var __BetDetailsSlim__ = default(global::Elympics.Rooms.Models.RoomBetDetailsSlim);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __RoomName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __IsPrivate__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<bool?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CustomRoomData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 5:
                        __CustomMatchmakingData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IReadOnlyDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __TournamentDetails__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomTournamentDetails>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 7:
                        __BetDetailsSlim__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.Rooms.Models.RoomBetDetailsSlim>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.SetRoomParameters(__OperationId__, __RoomId__, __RoomName__, __IsPrivate__, __CustomRoomData__, __CustomMatchmakingData__, __TournamentDetails__, __BetDetailsSlim__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SetUnreadyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.SetUnready>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.SetUnready value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
        }

        public global::Elympics.Rooms.Models.SetUnready Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.SetUnready(__OperationId__, __RoomId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StartMatchmakingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.StartMatchmaking>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.StartMatchmaking value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.RoomId, options);
        }

        public global::Elympics.Rooms.Models.StartMatchmaking Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomId__ = default(global::System.Guid);
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.StartMatchmaking(__OperationId__, __RoomId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnwatchRoomsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.UnwatchRooms>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.UnwatchRooms value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
        }

        public global::Elympics.Rooms.Models.UnwatchRooms Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.UnwatchRooms(__OperationId__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WatchRoomsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.Rooms.Models.WatchRooms>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.Rooms.Models.WatchRooms value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Serialize(ref writer, value.OperationId, options);
        }

        public global::Elympics.Rooms.Models.WatchRooms Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __OperationId__ = default(global::System.Guid);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __OperationId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.Rooms.Models.WatchRooms(__OperationId__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.SnapshotAnalysis
{
    public sealed class CollectorMatchDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.SnapshotAnalysis.CollectorMatchData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.SnapshotAnalysis.CollectorMatchData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Serialize(ref writer, value.MatchId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.QueueName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RegionName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IDictionary<global::System.Guid, global::System.Collections.Generic.IDictionary<string, string>>>(formatterResolver).Serialize(ref writer, value.CustomRoomData, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IDictionary<string, string>>(formatterResolver).Serialize(ref writer, value.CustomMatchmakingData, options);
        }

        public global::Elympics.SnapshotAnalysis.CollectorMatchData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new global::System.InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.SnapshotAnalysis.CollectorMatchData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.MatchId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Guid?>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.QueueName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.RegionName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.CustomRoomData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IDictionary<global::System.Guid, global::System.Collections.Generic.IDictionary<string, string>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.CustomMatchmakingData = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IDictionary<string, string>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SnapshotSaverInitDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.SnapshotAnalysis.SnapshotSaverInitData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.SnapshotAnalysis.SnapshotSaverInitData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.SnapshotSaverVersion, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.GameName, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.GameId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.GameVersion, options);
            writer.Write(value.Players);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.SdkVersion, options);
            writer.Write(value.TickDuration);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.SnapshotAnalysis.CollectorMatchData>(formatterResolver).Serialize(ref writer, value.CollectorMatchData, options);
            writer.Write(value.ExternalGameData);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IList<global::Elympics.InitialMatchPlayerDataGuid>>(formatterResolver).Serialize(ref writer, value.PlayerData, options);
        }

        public global::Elympics.SnapshotAnalysis.SnapshotSaverInitData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __SnapshotSaverVersion__ = default(string);
            var __GameName__ = default(string);
            var __GameId__ = default(string);
            var __GameVersion__ = default(string);
            var __Players__ = default(int);
            var __SdkVersion__ = default(string);
            var __TickDuration__ = default(float);
            var __CollectorMatchData__ = default(global::Elympics.SnapshotAnalysis.CollectorMatchData);
            var __ExternalGameData__ = default(byte[]);
            var __PlayerData__ = default(global::System.Collections.Generic.IList<global::Elympics.InitialMatchPlayerDataGuid>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __SnapshotSaverVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        __GameName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        __GameId__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        __GameVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Players__ = reader.ReadInt32();
                        break;
                    case 5:
                        __SdkVersion__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 6:
                        __TickDuration__ = reader.ReadSingle();
                        break;
                    case 7:
                        __CollectorMatchData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.SnapshotAnalysis.CollectorMatchData>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 8:
                        __ExternalGameData__ = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        break;
                    case 9:
                        __PlayerData__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.IList<global::Elympics.InitialMatchPlayerDataGuid>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Elympics.SnapshotAnalysis.SnapshotSaverInitData(__SnapshotSaverVersion__, __GameName__, __GameId__, __GameVersion__, __Players__, __SdkVersion__, __TickDuration__, __CollectorMatchData__, __ExternalGameData__, __PlayerData__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Elympics.SnapshotAnalysis.Serialization
{
    public sealed class SnapshotSerializationPackageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Elympics.SnapshotAnalysis.Serialization.SnapshotSerializationPackage>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Elympics.SnapshotAnalysis.Serialization.SnapshotSerializationPackage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsSnapshotWithMetadata[]>(formatterResolver).Serialize(ref writer, value.Snapshots, options);
        }

        public global::Elympics.SnapshotAnalysis.Serialization.SnapshotSerializationPackage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Elympics.SnapshotAnalysis.Serialization.SnapshotSerializationPackage();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Snapshots = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Elympics.ElympicsSnapshotWithMetadata[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

